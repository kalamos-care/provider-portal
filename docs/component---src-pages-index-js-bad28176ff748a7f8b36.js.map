{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js","webpack:///./node_modules/@material-ui/core/esm/utils/setRef.js","webpack:///./node_modules/@material-ui/core/esm/Link/Link.js","webpack:///./node_modules/@material-ui/core/esm/utils/useForkRef.js","webpack:///./src/components/Link.js","webpack:///./src/pages/index.js"],"names":["hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","this","visibilityState","node","type","tagName","target","matches","error","readOnly","isContentEditable","handleBlurVisible","window","clearTimeout","setTimeout","useIsFocusVisible","isFocusVisible","onBlurVisible","ref","instance","doc","ownerDocument","addEventListener","setRef","value","current","props","refA","refB","classes","className","_props$color","color","_props$component","component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_props$variant","variant","other","_useIsFocusVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","refValue","Typography","root","concat","capitalize","button","withStyles","underlineNone","textDecoration","underlineHover","underlineAlways","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","name","Link","React","forwardRef","GatsbyLink","Index","href","to","gutterBottom"],"mappings":"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","file":"component---src-pages-index-js-bad28176ff748a7f8b36.js","sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {// browsers not implementing :focus-visible will throw a SyntaxError\n    // we use our own heuristic for those browsers\n    // rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  } // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}","// TODO v5: consider to make it private\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}","import React from 'react';\nimport MuiLink from '@material-ui/core/Link';\nimport { Link as GatsbyLink } from 'gatsby';\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  return <MuiLink component={GatsbyLink} ref={ref} {...props} />;\n});\n\nexport default Link;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '../components/Link';\nimport Layout from \"../components/Layout\"\n\nconst Index = () => (\n  <Layout>\n      <p>\n        This is a simple example of creating dynamic apps with Gatsby that\n        require user authentication. It uses concepts from the\n        {` `}\n        <a href=\"https://www.gatsbyjs.org/docs/client-only-routes-and-user-authentication/\">\n          client-only routes section\n        </a>\n        {` `}\n        of the “Building Apps with Gatsby” documentation.\n      </p>\n      <p>\n        For the full experience, go to\n        {` `}\n        <Link to=\"/app/profile\">your profile</Link>.\n      </p>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Gatsby v4-beta example\n        </Typography>\n        <Link to=\"/about\" color=\"secondary\">\n          Go to the about page\n        </Link>\n         \n        <Link to=\"/app\" color=\"secondary\">\n          Go to the app page\n        </Link>\n  </Layout>\n)\n\nexport default Index"],"sourceRoot":""}